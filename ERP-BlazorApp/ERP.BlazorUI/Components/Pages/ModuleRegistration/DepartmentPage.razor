 @page "/departments/{departmentId:guid}"
@inject NavigationManager NavigationManager
@using ERP_SiteHome.DTOs.Response;
@rendermode InteractiveServer
<PageTitle>@departmentName</PageTitle>

    @if (Department == null)
{
    <p>Loading department details...</p>
}
else
{
    <div class="title-content" style="margin: 40px; text-align:center; position: relative;">
        <h1 style="color:darkblue; font-weight:500; font-size: 25px;">@Department.Name</h1>
        <div style="height: 10px;"></div>
        <div style="border-bottom: 2px solid darkblue; width: 100%; position: absolute; left: 0; right: 0; bottom: -12px;"></div>
    </div>

                // <BatchesList DepartmentId=departmentId />

    <MudTreeView T="string">
        @foreach (var batch in Batches)
        {
            <MudTreeViewItem Value="@batch.BatchName" @onclick="() => LoadSemesters(batch.BatchId)">
                @if (BatchSemesters.ContainsKey(batch.BatchId))
                {
                    @foreach (var semester in BatchSemesters[batch.BatchId])
                    {
                        <MudTreeViewItem Value="@semester.SemesterName" />
                    }
                }
            </MudTreeViewItem>
        }
    </MudTreeView>
}

@code {
    [Parameter]
    public Guid departmentId { get; set; }

    [Parameter]
    public Guid batchId { get; set; }

    private HttpClient Http = new HttpClient();

    private GetDepartmentResponse Department;
    private GetBatchResponse Batch;
    private string departmentName = "Department Details";

    private List<GetBatchResponse> Batches = new List<GetBatchResponse>();
    private Dictionary<Guid, List<GetSemesterResponse>> BatchSemesters = new Dictionary<Guid, List<GetSemesterResponse>>();
    private Guid selectedBatchId;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            await LoadDepartment();
            await LoadBatches();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
            departmentName = "Error Loading Department";
            Batches = new List<GetBatchResponse>();
        }
    }

    private async Task LoadDepartment()
    {
        Department = await Http.GetFromJsonAsync<GetDepartmentResponse>($"https://localhost:7186/api/Department/{departmentId}");
        if (Department != null)
        {
            departmentName = Department.Name;
            departmentId = Department.DepartmentId;
        }
        else
        {
            departmentName = "Department Not Found";
        }

    }

    private async Task LoadBatches()
    {
        Batches = await Http.GetFromJsonAsync<List<GetBatchResponse>>($"https://localhost:7186/api/Batch/Departments/{departmentId}");

    }

    private async Task LoadSemesters(Guid batchId)
    {
        if (!BatchSemesters.ContainsKey(batchId))
        {
            var semesters = await Http.GetFromJsonAsync<List<GetSemesterResponse>>($"https://localhost:7186/api/Semester/Batches/{batchId}");
            BatchSemesters[batchId] = semesters ?? new List<GetSemesterResponse>();
            StateHasChanged();
        }
    }


}
