@page "/requestdetails/{requestId:guid}"
@rendermode InteractiveServer
@using ERP_StudentRequests.Core.DTOs.Request
@using ERP_StudentRequests.Core.DTOs.Response
@using ERP_StudentRequests.StudentPages.ReplyDialog
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialogProvider />
<MudSnackbarProvider />

@if (requestDetails != null)
{
    <MudText Typo="Typo.h4" Style="margin-bottom: 20px;">@requestDetails.Topic</MudText>

   <MudCard>
        <MudCardContent>
            <!-- Student Details Card -->
            <MudCard Style="margin-bottom: 20px;width: 400px; margin-left: 950px;">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Style="margin-bottom: 15px;" ><strong>Student Details</strong></MudText>
                    <MudText Style="margin-bottom: 15px;"><strong>Student Name:</strong> @requestDetails.StudentName</MudText>
                        <MudText Style="margin-bottom: 15px;"><strong>Student Reg No:</strong> @requestDetails.StudentRegNo</MudText>
                        <MudText Style="margin-bottom: 15px;"><strong>Student Degree:</strong> @requestDetails.StudentDegree</MudText>
                        <MudText Style="margin-bottom: 15px;"><strong>Batch:</strong> @requestDetails.StudentBatch</MudText>
                        <MudText Style="margin-bottom: 15px;"><strong>Semester:</strong> @requestDetails.Semester</MudText>
                </MudCardContent>
            </MudCard>

                <!-- Request Details -->
                <MudText Style="margin-bottom: 15px;"><strong>Request Type:</strong> @requestDetails.RequestType</MudText>
                <MudText Style="margin-bottom: 15px;"><strong> To Lecturer:</strong> @requestDetails.LecturerName</MudText>
                <MudText Style="margin-bottom: 15px;"><strong>Date:</strong> @requestDetails.AddedDate</MudText>
                <MudText Style="margin-bottom: 15px;"><strong>Message:</strong></MudText>
                <MudText Style="margin-bottom: 15px; margin-top: 5px;">@requestDetails.Message</MudText>
        </MudCardContent>
   </MudCard>

   <MudContainer>

        <div class="title-content" style="margin: 40px;margin-left:300px; text-align:center;">
            <h1 style="color:darkblue; font-weight:500; font-size:20px">Replies</h1>
            <div style="border-bottom: 2px solid darkblue; margin-top: 10px; width: 100%;"></div>
        </div>

        <div class="reply-container">
            <div class="reply-messages">
                @foreach (var reply in replies.OrderByDescending(m => m.AddedDate))
                {
                    <div class="message received">
                        <MudCard Class="bg-light">
                            <MudCardContent>
                                <div>
                                    <span>@reply.Message</span>
                                </div>
                                <div class="message-info" style="margin-top: 10px;">
                                    <span>@reply.SenderName</span>
                                </div>
                                <div class="message-info">
                                    <span>@reply.AddedDate</span>
                                </div>
                                <MudButton OnClick="@(async () => await OpenReplyDialog(reply))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Reply">Reply</MudButton>
                            </MudCardContent>
                        </MudCard>
                    </div>
                }
            </div>
        </div>

   </MudContainer>

}
else
{
    <MudText>Loading...</MudText>
}

@code {


    [Parameter]
    public Guid requestId { get; set; }

    private GetReqLetterResponse requestDetails = new GetReqLetterResponse();

    private HttpClient Http = new HttpClient();

    private List<GetReplyResponse> replies = new List<GetReplyResponse>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadRequestDetails();
            await LoadReplyResults();


        }
        catch (Exception ex)
        {
            replies = new List<GetReplyResponse>();
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadRequestDetails()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<GetReqLetterResponse>($"https://localhost:7011/api/Requests/{requestId}");
            requestDetails = response ?? new GetReqLetterResponse();
        }
        catch (Exception ex)
        {
            requestDetails = new GetReqLetterResponse();
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadReplyResults()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<GetReplyResponse>>($"https://localhost:7011/api/Reply/Requests/{requestId}");
            replies = response ?? new List<GetReplyResponse>();

        }
        catch (Exception ex)
        {
            replies = new List<GetReplyResponse>();
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OpenReplyDialog(GetReplyResponse reply)
    {
        // var options = new DialogOptions
        //     {
        //         MaxWidth = MaxWidth.Medium,
        //         FullWidth = true
        //     };

        var parameters = new DialogParameters
        {
            { "ReplyData", reply }
        };

        var dialog = DialogService.Show<ReplyDialog>("Enter Reply", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadReplyResults();
        }
    }
}

<style>

    .title-content {
        max-width: 60%;
        padding: 0 20px;
    }

    .bg-blue-light {
        background-color: transparent;
        background-image: linear-gradient(to right, transparent 30%, lightblue);
    }

    .bg-green-light {
        background-color: transparent;
        background-image: linear-gradient(to right, transparent 30%, palegreen);
    }

    .bg-pink-light {
        background-color: transparent;
        background-image: linear-gradient(to right, transparent 5%, lavenderblush);
    }

    .bg-lavender-light {
        background-color: transparent;
        background-image: linear-gradient(to right, transparent 40%, lavender);
    }

    .bg-grey-light {
        background-color: transparent;
        background-image: linear-gradient(to right, transparent 40%, lightgrey);
    }


    body {
        position: relative;
        margin: 0;
        padding: 0;
        min-height: 100vh; /* Ensure body covers the entire viewport height */
        background-image: url('images/4.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }

        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9); /* Light grey color with 50% opacity */
            z-index: -1;
        }

    .heading {
        text-align: center;
        padding: 20px;
    }

    .search-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

        .search-container input[type="text"] {
            margin-right: 10px;
        }

        .search-container button {
            margin-left: 10px;
        }

    .reply-container {
        width: 100%;
    }

    .reply-messages {
        overflow-y: auto;
        padding: 10px;
        align-items: center;
        overflow-y: auto;
        padding: 10px;
    }

    .message {
        margin-bottom: 50px;
    }

    .reply-content {
        padding: 8px 12px;
        border-radius: 8px;
        max-width: 80%;
        word-wrap: break-word;
    }

    .message-info {
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 0.8rem;
        margin-bottom: 5px;
    }

    .request-type {
        text-align: center;
        margin-bottom: 10px;
        font-weight: bold;
    }
</style>