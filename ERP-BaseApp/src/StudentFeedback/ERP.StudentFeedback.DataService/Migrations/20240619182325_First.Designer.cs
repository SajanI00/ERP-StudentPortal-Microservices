// <auto-generated />
using System;
using ERP.StudentFeedback.DataService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.StudentFeedback.DataService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240619182325_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommunicationRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConceptRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoverageRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamplesRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExplanationClarityRating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FeedbackGroupId")
                        .HasColumnType("TEXT");

                    b.Property<int>("InteractionRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureContentRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureEngagementRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureOrganizationRating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LecturerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OverallFeedback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaceRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipationRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RealWorldApplicationsRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelevanceToCourseRating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SummaryEffectivenessRating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisualAidsRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackGroupId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.FeedbackGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedbackGroups");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.FeedbackGroupStudent", b =>
                {
                    b.Property<Guid>("FeedbackGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedbackGroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("FeedbackGroupStudent");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.LecturersModules", b =>
                {
                    b.Property<Guid>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("LecturerId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("LecturersModules");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.LecturersSemesters", b =>
                {
                    b.Property<Guid>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("LecturerId", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.ToTable("LecturersSemesters");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LecturerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LecturerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Feedback", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.FeedbackGroup", "FeedbackGroup")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_FeedbackGroup");

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", "Lecturer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Lecturer");

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackGroup");

                    b.Navigation("Lecturer");

                    b.Navigation("Module");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.FeedbackGroup", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", "Lecturer")
                        .WithMany("FeedbackGroups")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_FeedbackGroups_Lecturer");

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Student", null)
                        .WithMany("FeedbackGroups")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.FeedbackGroupStudent", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.FeedbackGroup", "FeedbackGroup")
                        .WithMany("FeedbackGroupStudents")
                        .HasForeignKey("FeedbackGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Student", "Student")
                        .WithMany("FeedbackGroupStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.LecturersModules", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", "Lecturer")
                        .WithMany("LecturersModules")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Module", "Module")
                        .WithMany("LecturersModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.LecturersSemesters", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", "Lecturer")
                        .WithMany("LecturersSemesters")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.StudentFeedback.Core.Entity.Semester", "Semester")
                        .WithMany("LecturersSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Module", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", null)
                        .WithMany("ModulesTeaching")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Semester", b =>
                {
                    b.HasOne("ERP.StudentFeedback.Core.Entity.Lecturer", null)
                        .WithMany("SemestersTeaching")
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.FeedbackGroup", b =>
                {
                    b.Navigation("FeedbackGroupStudents");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Lecturer", b =>
                {
                    b.Navigation("FeedbackGroups");

                    b.Navigation("Feedbacks");

                    b.Navigation("LecturersModules");

                    b.Navigation("LecturersSemesters");

                    b.Navigation("ModulesTeaching");

                    b.Navigation("SemestersTeaching");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Module", b =>
                {
                    b.Navigation("LecturersModules");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Semester", b =>
                {
                    b.Navigation("LecturersSemesters");
                });

            modelBuilder.Entity("ERP.StudentFeedback.Core.Entity.Student", b =>
                {
                    b.Navigation("FeedbackGroupStudents");

                    b.Navigation("FeedbackGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
